struct ActorSpinner play {
	/** The actor being spun. */
	Actor mo;
	
	/** Current angular velocity of the object, in degrees per tic. */
	float Vel;
	
	/** Desired angular velocity. As long as Vel != DesVel, Vel will increase/decrease every tic (by Accel/Decel) until it reaches DesVel. */
	float DesVel;
	
	/** When accelerating, this is how much Vel in/decreases per tic. */
	float Accel;
	
	/** This is set to true when LandAt is called, then set to false when landing is complete. */
	private bool Landing;
	
	/** If not zero, acceleration will be at this rate until Vel reaches DesVel. */
	private float TmpAccel;
	
	/** When landing, when Vel reaches DesVel, rotation will snap to this angle (if possible). */
	private float SnapAngle;
	
	/** Resets the state of this ActorSpinner. The fields mo, DesVel, Accel, and Decel are not affected. */
	void Reset() {
		Landing = false;
		Vel = TmpAccel = 0;
	}
	
	void Tick() {
		if (!mo) {
			Console.Printf("\cgActorSpinner.Tick called, but mo (the actor to be rotated) is null!");
			return;
		}
		
		if (Landing) {
			if ((Vel >= DesVel) != (Vel + TmpAccel >= DesVel)) {
				// Reached DesVel while landing.
				// Try to snap to SnapAngle. If impossible, get as close as possible.
				
				// This is the range of achievable angular velocities on this tic. X is in the negative direction, Y is in the positive direction.
				let allowedVel = (Vel - Accel, Vel + Accel);
				// This is the range of achievable roll angles on this tic.
				let allowedRoll = (mo.Roll + allowedVel.X, mo.Roll + allowedVel.Y);
				
				// Apply acceleration and rotation.
				Vel = clamp(DesVel, allowedVel.X, allowedVel.Y);
				mo.Roll = clamp(SnapAngle, allowedRoll.X, allowedRoll.Y);
				
				// Landing mode complete.
				Landing = false;
				TmpAccel = 0;
				
				// Skip normal rotation for this tic.
				return;
			}
			else if (TmpAccel) {
				// Apply acceleration according to TmpAccel.
				Vel += TmpAccel;
			}
			else if (!TmpAccel) {
				// Waiting for optimal landing angle. Check if it's been reached yet.
				LandAt(SnapAngle);
				
				if (TmpAccel)
					Vel += TmpAccel; // Yep, reached.
			}
		}
		else {
			// Apply normal acceleration.
			if (DesVel > Vel)
				Vel = min(Vel + Accel, DesVel);
			else
				Vel = max(Vel - Accel, DesVel);
		}
		
		// Apply rotation.
		mo.Roll = Actor.Normalize180(mo.Roll + Vel);
	}
	
	/**
	 * Accelerate or decelerate the object such that, after enough rotations, its angular velocity will equal DesVel when its roll crosses the angle desiredRoll. Be sure to set DesVel *before* calling this method.
	 *
	 * After this method is called, this ActorSpinner will enter landing mode. Do not change the DesVel field while this mode is active; that will make the animation behave strangely. The IsLandingInProgress method returns true if this mode is active. Call CancelLanding to cancel this mode and resume normal operation. Changing DesVel and immediately calling this method again is also safe.
	 *
	 * The main use case of this method is to make the object spin down such that, when it stops spinning, it ends up at the desired roll angle (typically zero).
	 */
	void LandAt(float desiredRoll) {
		if (Vel < double.epsilon && Vel > -double.epsilon)
			return; // Already landed.
		
		Landing = true;
		SnapAngle = desiredRoll;
		
		float proposedAccel[2];
		int proposedTime[2];
		
		for (let ofs = 0; ofs < 2; ofs++) {
			let low = DesVel < Vel? -Accel : 0;
			let high = DesVel > Vel? Accel : 0;
			let step = (high - low) / 1000.;
			let curRoll = mo.Roll + (Vel * ofs);
			float searchStart, searchEnd;
			let found = false;
			
			if (DesVel < Vel) {
				searchStart = low;
				searchEnd = high;
			}
			else {
				searchStart = high;
				searchEnd = low;
				step = -step;
			}
			
			for (let mayAccel = searchStart; (mayAccel >= searchEnd) == (searchStart >= searchEnd); mayAccel += step) {
				let time = (DesVel - Vel + mayAccel) / mayAccel;
				let landAngle = Actor.Normalize180(curRoll + (time * (Vel + ((DesVel - Vel + mayAccel + mayAccel) / 2.))));
				let da = Actor.deltaangle(desiredRoll, landAngle);
				
				if (da > -Accel && da < Accel) {
					proposedAccel[ofs] = mayAccel;
					proposedTime[ofs] = ceil(time);
					found = true;
					break;
				}
			}
			
			if (!found)
				proposedAccel[ofs] = float.NaN;
		}
		
		if (proposedAccel[0] != proposedAccel[0] /* is NaN */) {
			Console.Printf("\cgSpriteSpinner(%s) @ (% 03.5f, % 03.5f) cannot compute a landing acceleration slope!", mo.GetClassName(), Vel, mo.Roll);
			Landing = false;
			mo.Roll = desiredRoll;
			Vel = DesVel;
			TmpAccel = 0;
		}
		else if (proposedAccel[1] == proposedAccel[1] /* is not NaN */ && proposedTime[1] < proposedTime[0]) {
			// Waiting a tic at current velocity will result in a shorter spin-down. Do nothing for now.
		}
		else {
			// Reached optimal landing angle. Begin spinning down.
			TmpAccel = proposedAccel[0];
		}
	}
	
	/** Cancels the effect of a previous call to LandAt. */
	void CancelLanding() {
		Landing = false;
		TmpAccel = 0;
	}
	
	/** Returns true if this ActorSpinner is still in landing mode. */
	bool IsLandingInProgress() const {
		return Landing;
	}
}
